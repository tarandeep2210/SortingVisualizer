{"version":3,"sources":["logo.svg","sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SortingVisualizer","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","n","temp","bubbleSortHelper","getBubbleSortAnimations","tempHeight","callback","className","onClick","mergeSort","bubbleSort","map","value","idx","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.656890a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\n\r\nexport function getBubbleSortAnimations(array){\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    bubbleSortHelper(array,animations);\r\n    return animations;\r\n}\r\n\r\nfunction bubbleSortHelper(array,animations){\r\n    let n = array.length;\r\n    for(let i =0;i<n-1;i++){\r\n        for(let j =0;j<n-i-1;j++){\r\n            // animations.push([i,j]);\r\n            if (array[j] > array[j+1]){\r\n                let temp = array[j];\r\n                array[j] = array[j+1];\r\n                array[j+1]=temp;\r\n                animations.push([j,j+1]);\r\n            }\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport App from '../App';\r\nimport {getMergeSortAnimations,getBubbleSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\n\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 330;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = '#FE2EF7';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\n\r\nexport class SortingVisualizer extends React.Component{\r\n    \r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            array :[],\r\n        };\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray(){\r\n        const array =[];\r\n\r\n        for(let i=0;i<NUMBER_OF_ARRAY_BARS;i++){\r\n            array.push(randomInt(5,500));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n          const isColorChange = i % 3 !== 2;\r\n          if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          }\r\n        }\r\n      }\r\n\r\n      bubbleSort(){\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color =  SECONDARY_COLOR;\r\n            setTimeout(()=>{\r\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n                let tempHeight = barTwoStyle.height;\r\n                barTwoStyle.height = barOneStyle.height;\r\n                barOneStyle.height = tempHeight;\r\n                setTimeout(()=>{\r\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                    barTwoStyle.backgroundColor  = PRIMARY_COLOR;\r\n                },ANIMATION_SPEED_MS);\r\n               \r\n            }, i * ANIMATION_SPEED_MS);\r\n           \r\n        }\r\n      }\r\n       changeColor(barOneStyle,barTwoStyle,callback){\r\n        barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n        barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n        let tempHeight = barTwoStyle.height;\r\n        barTwoStyle.height = barOneStyle.height;\r\n        barOneStyle.height = tempHeight;\r\n        callback(barOneStyle,barTwoStyle);\r\n      }\r\n      resetColor(barOneStyle,barTwoStyle){\r\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n          barTwoStyle.backgroundColor  = PRIMARY_COLOR;\r\n      }\r\n    \r\n\r\n    render(){\r\n        \r\n        const {array} = this.state;\r\n        return (<>\r\n        <h2>Sorting Visualizer</h2>\r\n        <button className=\"btn btn-primary\" onClick={() => this.resetArray()}>Generate New Array</button>\r\n        <button className=\"btn btn-primary\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n        <button className=\"btn btn-primary\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n            <div className=\"array-container\">\r\n                {array.map((value,idx) => (\r\n                        <div className=\"array-bar\" key={idx} style={{height : `${value}px`}}>\r\n                           \r\n                        </div>\r\n                    ))}\r\n            </div>\r\n        </>);\r\n    }\r\n\r\n}\r\n\r\nfunction  randomInt(min,max){\r\n    return Math.floor(Math.random()*(max-min+1) + min);\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {SortingVisualizer} from './SortingVisualizer/SortingVisualizer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}